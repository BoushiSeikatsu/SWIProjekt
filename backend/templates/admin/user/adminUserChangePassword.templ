package templatesAdminUser

import (
    "strconv"
    "swi-warehouse/models"
    "swi-warehouse/templates"
)

templ AdminChangePassword(users []models.User) {
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Change user password</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
        <style>
            body, html {
                height: 100%;
                margin: 0;
                overflow: hidden;
            }
            .navbar {
                position: fixed;
                top: 0;
                width: 100%;
                z-index: 1000;
                background-color: #be274b;
                padding: 10px 0;
            }
            .navbar .nav-link,
            .navbar .navbar-icon {
                color: #e2e6ea;
                padding: 10px 15px;
                font-weight: bold;
                text-align: center;
                display: flex;
                flex-direction: column;
                line-height: 1.2;
                position: relative;
            }
            .navbar-icon {
                font-size: 1.5rem;
                cursor: default;
            }
            .nav-link[onclick] {
                cursor: pointer;
                user-select: none;
            }
            .d-flex {
                align-items: center;
            }
            .navbar .nav-link:hover {
                background-color: #da3060;
                border-radius: 5px;
                transition: background-color 0.3s ease;
            }
            .content-container {
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                padding-top: 78px;
            }
            .justify-between {
                display: flex;
                align-items: center;
                justify-content: space-between;
                width: 100%;
            }
            .submenu {
                display: none;
                position: absolute;
                background-color: #f8f9fa;
                border-radius: 5px;
                padding: 10px;
                top: 100%;
                left: 50%;
                transform: translateX(-50%);
                margin-top: 5px;
                z-index: 1001;
            }
            .submenu a {
                color: #333;
                text-decoration: none;
                display: block;
                padding: 5px 15px;
            }
            .submenu a:hover {
                background-color: #ddd;
                border-radius: 5px;
            }
            .setup-container {
                height: calc(100% + 78px);
                display: flex;
                justify-content: center;
                align-items: center;
            }
            .setup-form {
                width: 100%;
                max-width: 400px;
                padding: 15px;
                border: 1px solid #ccc;
                border-radius: 10px;
                box-shadow: 0px 0px 10px rgba(0,0,0,0.1);
            }
            .error-text {
                color: red;
                font-size: 0.875em;
                margin-top: 5px;
            }
        </style>
    </head>
    <body>
        @templates.AdminNav()

        <div class="container setup-container">
            <div class="setup-form">
                <h2 class="text-center mb-4">Change user password</h2>
                <form method="post">
                    <div class="mb-3">
                        <label for="userSelect" class="form-label">Select User</label>
                        <select class="form-select" id="userSelect" name="userSelect" required>
                            <option value="" disabled selected>Select a user</option>
                            for _, user := range users {
                                <option value={strconv.FormatUint(uint64(user.ID), 10)}>{user.Username}</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="newPassword" name="newPassword" placeholder="New Password">
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('newPassword', this)">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                        <div class="error-text">Optional password error</div>
                    </div>
                    <div class="mb-3">
                        <label for="passwordRepeat" class="form-label">Confirm New Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="passwordRepeat" name="passwordRepeat" placeholder="Confirm New Password">
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('passwordRepeat', this)">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                        <div class="error-text">Optional confirm password error</div>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-shield-lock me-2"></i>Set Password
                    </button>
                </form>
            </div>
        </div>

        <script>
            function togglePassword(fieldId, button) {
                const field = document.document.getElementById(fieldId);;
                const icon = button.querySelector('i');
                if (field.type === "password") {
                    field.type = "text";
                    icon.classList.replace('bi-eye', 'bi-eye-slash');
                } else {
                    field.type = "password";
                    icon.classList.replace('bi-eye-slash', 'bi-eye');
                }
            }
            function toggleSubmenu(id) {
                const submenu = document.getElementById(id);
                const isVisible = submenu.style.display === 'block';
                document.querySelectorAll('.submenu').forEach(menu => menu.style.display = 'none');
                submenu.style.display = isVisible ? 'none' : 'block';
            }
            document.addEventListener('click', function(e) {
                const isClickInside = e.target.closest('.nav-link') || e.target.closest('.submenu');
                if (!isClickInside) {
                    document.querySelectorAll('.submenu').forEach(menu => menu.style.display = 'none');
                }
            });
        </script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    </body>
    </html>

}